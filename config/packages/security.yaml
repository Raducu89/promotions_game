security:
    enable_authenticator_manager: true
    
    password_hashers:
        App\Entity\Users: 'auto'
    
    providers:
        users_provider:
            entity:
                class: App\Entity\Users
                property: username
    
    firewalls:
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
    
        api:
            pattern:   ^/api
            stateless: true
            jwt: ~
    
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
    
        main:
            lazy: true
            provider: users_provider
            # Here you can configure how users should be authenticated
            # (e.g. form_login, http_basic, etc.)
            # form_login: ~

    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            App\Entity\Users:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
